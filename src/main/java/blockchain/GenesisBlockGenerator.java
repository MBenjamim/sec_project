package main.java.blockchain;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import main.java.crypto_utils.RSAKeyReader;
import org.apache.tuweni.bytes.Bytes;
import org.hyperledger.besu.datatypes.Address;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.FileOutputStream;
import java.io.IOException;
import java.security.PublicKey;
import java.util.ArrayList;
import java.util.List;

public class GenesisBlockGenerator {
    private static final Logger logger = LoggerFactory.getLogger(GenesisBlockGenerator.class);

    private static final String publicKeysDir = "public_keys/";
    private static final String genesisBlockPath = "genesis_block.json";

    private static final Bytes accessControl = Bytes.fromHexString("608060405234801561000f575f80fd5b5060043610610060575f3560e01c806344337ea114610064578063537df3b6146100945780638da5cb5b146100c4578063b8d2e1db146100e2578063c7822dc414610112578063fe575a871461012e575b5f80fd5b61007e600480360381019061007991906106fe565b61015e565b60405161008b9190610743565b60405180910390f35b6100ae60048036038101906100a991906106fe565b610344565b6040516100bb9190610743565b60405180910390f35b6100cc610529565b6040516100d9919061076b565b60405180910390f35b6100fc60048036038101906100f791906106fe565b61054c565b6040516101099190610743565b60405180910390f35b61012c600480360381019061012791906107ae565b610569565b005b610148600480360381019061014391906106fe565b61064e565b6040516101559190610743565b60405180910390f35b5f6001151560025f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff161515146101ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101e690610846565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361025d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610254906108ae565b60405180910390fd5b60015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16156102e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102de90610916565b60405180910390fd5b6001805f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff02191690831515021790555060019050919050565b5f6001151560025f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff161515146103d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103cc90610846565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610443576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043a906108ae565b60405180910390fd5b60015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff166104cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c39061097e565b60405180910390fd5b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff02191690831515021790555060019050919050565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6002602052805f5260405f205f915054906101000a900460ff1681565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ed906109e6565b60405180910390fd5b8060025f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055505050565b5f60015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff169050919050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6106cd826106a4565b9050919050565b6106dd816106c3565b81146106e7575f80fd5b50565b5f813590506106f8816106d4565b92915050565b5f60208284031215610713576107126106a0565b5b5f610720848285016106ea565b91505092915050565b5f8115159050919050565b61073d81610729565b82525050565b5f6020820190506107565f830184610734565b92915050565b610765816106c3565b82525050565b5f60208201905061077e5f83018461075c565b92915050565b61078d81610729565b8114610797575f80fd5b50565b5f813590506107a881610784565b92915050565b5f80604083850312156107c4576107c36106a0565b5b5f6107d1858286016106ea565b92505060206107e28582860161079a565b9150509250929050565b5f82825260208201905092915050565b7f4e6f7420617574686f72697a65640000000000000000000000000000000000005f82015250565b5f610830600e836107ec565b915061083b826107fc565b602082019050919050565b5f6020820190508181035f83015261085d81610824565b9050919050565b7f496e76616c6964206164647265737300000000000000000000000000000000005f82015250565b5f610898600f836107ec565b91506108a382610864565b602082019050919050565b5f6020820190508181035f8301526108c58161088c565b9050919050565b7f416c726561647920626c61636b6c6973746564000000000000000000000000005f82015250565b5f6109006013836107ec565b915061090b826108cc565b602082019050919050565b5f6020820190508181035f83015261092d816108f4565b9050919050565b7f4e6f7420626c61636b6c697374656400000000000000000000000000000000005f82015250565b5f610968600f836107ec565b915061097382610934565b602082019050919050565b5f6020820190508181035f8301526109958161095c565b9050919050565b7f4e6f7420617574686f72697a656420286f6e6c79206f776e65722900000000005f82015250565b5f6109d0601b836107ec565b91506109db8261099c565b602082019050919050565b5f6020820190508181035f8301526109fd816109c4565b905091905056fea2646970667358221220e641fe914213c54e66bb8ca2a5866be58954d98549563ce87fe57297eaf3283c64736f6c634300081a0033");
    private static final Bytes fungibleToken = Bytes.fromHexString("608060405234801561000f575f80fd5b50604051611b7c380380611b7c83398181016040528101906100319190610442565b6040518060400160405280600881526020017f49535420436f696e0000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f495354000000000000000000000000000000000000000000000000000000000081525081600390816100ac91906106ba565b5080600490816100bc91906106ba565b5050506100f7826100d161013e60201b60201c565b600a6100dd91906108f1565b6305f5e1006100ec919061093b565b61014660201b60201c565b8060055f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050610a34565b5f6002905090565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036101b6575f6040517fec442f050000000000000000000000000000000000000000000000000000000081526004016101ad919061098b565b60405180910390fd5b6101c75f83836101cb60201b60201c565b5050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361021b578060025f82825461020f91906109a4565b925050819055506102e9565b5f805f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050818110156102a4578381836040517fe450d38c00000000000000000000000000000000000000000000000000000000815260040161029b939291906109e6565b60405180910390fd5b8181035f808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550505b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610330578060025f828254039250508190555061037a565b805f808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516103d79190610a1b565b60405180910390a3505050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610411826103e8565b9050919050565b61042181610407565b811461042b575f80fd5b50565b5f8151905061043c81610418565b92915050565b5f8060408385031215610458576104576103e4565b5b5f6104658582860161042e565b92505060206104768582860161042e565b9150509250929050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806104fb57607f821691505b60208210810361050e5761050d6104b7565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026105707fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610535565b61057a8683610535565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f6105be6105b96105b484610592565b61059b565b610592565b9050919050565b5f819050919050565b6105d7836105a4565b6105eb6105e3826105c5565b848454610541565b825550505050565b5f90565b6105ff6105f3565b61060a8184846105ce565b505050565b5b8181101561062d576106225f826105f7565b600181019050610610565b5050565b601f8211156106725761064381610514565b61064c84610526565b8101602085101561065b578190505b61066f61066785610526565b83018261060f565b50505b505050565b5f82821c905092915050565b5f6106925f1984600802610677565b1980831691505092915050565b5f6106aa8383610683565b9150826002028217905092915050565b6106c382610480565b67ffffffffffffffff8111156106dc576106db61048a565b5b6106e682546104e4565b6106f1828285610631565b5f60209050601f831160018114610722575f8415610710578287015190505b61071a858261069f565b865550610781565b601f19841661073086610514565b5f5b8281101561075757848901518255600182019150602085019450602081019050610732565b868310156107745784890151610770601f891682610683565b8355505b6001600288020188555050505b505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f8160011c9050919050565b5f808291508390505b600185111561080b578086048111156107e7576107e6610789565b5b60018516156107f65780820291505b8081029050610804856107b6565b94506107cb565b94509492505050565b5f8261082357600190506108de565b81610830575f90506108de565b816001811461084657600281146108505761087f565b60019150506108de565b60ff84111561086257610861610789565b5b8360020a91508482111561087957610878610789565b5b506108de565b5060208310610133831016604e8410600b84101617156108b45782820a9050838111156108af576108ae610789565b5b6108de565b6108c184848460016107c2565b925090508184048111156108d8576108d7610789565b5b81810290505b9392505050565b5f60ff82169050919050565b5f6108fb82610592565b9150610906836108e5565b92506109337fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484610814565b905092915050565b5f61094582610592565b915061095083610592565b925082820261095e81610592565b9150828204841483151761097557610974610789565b5b5092915050565b61098581610407565b82525050565b5f60208201905061099e5f83018461097c565b92915050565b5f6109ae82610592565b91506109b983610592565b92508282019050808211156109d1576109d0610789565b5b92915050565b6109e081610592565b82525050565b5f6060820190506109f95f83018661097c565b610a0660208301856109d7565b610a1360408301846109d7565b949350505050565b5f602082019050610a2e5f8301846109d7565b92915050565b61113b80610a415f395ff3fe608060405234801561000f575f80fd5b506004361061009c575f3560e01c8063313ce56711610064578063313ce5671461015a57806370a082311461017857806395d89b41146101a8578063a9059cbb146101c6578063dd62ed3e146101f65761009c565b806306fdde03146100a0578063095ea7b3146100be57806313007d55146100ee57806318160ddd1461010c57806323b872dd1461012a575b5f80fd5b6100a8610226565b6040516100b59190610c83565b60405180910390f35b6100d860048036038101906100d39190610d34565b6102b6565b6040516100e59190610d8c565b60405180910390f35b6100f66102d8565b6040516101039190610e00565b60405180910390f35b6101146102fd565b6040516101219190610e28565b60405180910390f35b610144600480360381019061013f9190610e41565b610306565b6040516101519190610d8c565b60405180910390f35b6101626103f4565b60405161016f9190610eac565b60405180910390f35b610192600480360381019061018d9190610ec5565b6103fc565b60405161019f9190610e28565b60405180910390f35b6101b0610441565b6040516101bd9190610c83565b60405180910390f35b6101e060048036038101906101db9190610d34565b6104d1565b6040516101ed9190610d8c565b60405180910390f35b610210600480360381019061020b9190610ef0565b6105bd565b60405161021d9190610e28565b60405180910390f35b60606003805461023590610f5b565b80601f016020809104026020016040519081016040528092919081815260200182805461026190610f5b565b80156102ac5780601f10610283576101008083540402835291602001916102ac565b820191905f5260205f20905b81548152906001019060200180831161028f57829003601f168201915b5050505050905090565b5f806102c061063f565b90506102cd818585610646565b600191505092915050565b60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f600254905090565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe575a87336040518263ffffffff1660e01b81526004016103619190610f9a565b602060405180830381865afa15801561037c573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103a09190610fdd565b156103e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103d790611052565b60405180910390fd5b6103eb848484610658565b90509392505050565b5f6002905090565b5f805f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b60606004805461045090610f5b565b80601f016020809104026020016040519081016040528092919081815260200182805461047c90610f5b565b80156104c75780601f1061049e576101008083540402835291602001916104c7565b820191905f5260205f20905b8154815290600101906020018083116104aa57829003601f168201915b5050505050905090565b5f60055f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe575a87336040518263ffffffff1660e01b815260040161052c9190610f9a565b602060405180830381865afa158015610547573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061056b9190610fdd565b156105ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a290611052565b60405180910390fd5b6105b58383610686565b905092915050565b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b5f33905090565b61065383838360016106a8565b505050565b5f8061066261063f565b905061066f858285610877565b61067a85858561090a565b60019150509392505050565b5f8061069061063f565b905061069d81858561090a565b600191505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610718575f6040517fe602df0500000000000000000000000000000000000000000000000000000000815260040161070f9190610f9a565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610788575f6040517f94280d6200000000000000000000000000000000000000000000000000000000815260040161077f9190610f9a565b60405180910390fd5b8160015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508015610871578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516108689190610e28565b60405180910390a35b50505050565b5f61088284846105bd565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81101561090457818110156108f5578281836040517ffb8f41b20000000000000000000000000000000000000000000000000000000081526004016108ec93929190611070565b60405180910390fd5b61090384848484035f6106a8565b5b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361097a575f6040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016109719190610f9a565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036109ea575f6040517fec442f050000000000000000000000000000000000000000000000000000000081526004016109e19190610f9a565b60405180910390fd5b6109f58383836109fa565b505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610a4a578060025f828254610a3e91906110d2565b92505081905550610b18565b5f805f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905081811015610ad3578381836040517fe450d38c000000000000000000000000000000000000000000000000000000008152600401610aca93929190611070565b60405180910390fd5b8181035f808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550505b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610b5f578060025f8282540392505081905550610ba9565b805f808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610c069190610e28565b60405180910390a3505050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f610c5582610c13565b610c5f8185610c1d565b9350610c6f818560208601610c2d565b610c7881610c3b565b840191505092915050565b5f6020820190508181035f830152610c9b8184610c4b565b905092915050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610cd082610ca7565b9050919050565b610ce081610cc6565b8114610cea575f80fd5b50565b5f81359050610cfb81610cd7565b92915050565b5f819050919050565b610d1381610d01565b8114610d1d575f80fd5b50565b5f81359050610d2e81610d0a565b92915050565b5f8060408385031215610d4a57610d49610ca3565b5b5f610d5785828601610ced565b9250506020610d6885828601610d20565b9150509250929050565b5f8115159050919050565b610d8681610d72565b82525050565b5f602082019050610d9f5f830184610d7d565b92915050565b5f819050919050565b5f610dc8610dc3610dbe84610ca7565b610da5565b610ca7565b9050919050565b5f610dd982610dae565b9050919050565b5f610dea82610dcf565b9050919050565b610dfa81610de0565b82525050565b5f602082019050610e135f830184610df1565b92915050565b610e2281610d01565b82525050565b5f602082019050610e3b5f830184610e19565b92915050565b5f805f60608486031215610e5857610e57610ca3565b5b5f610e6586828701610ced565b9350506020610e7686828701610ced565b9250506040610e8786828701610d20565b9150509250925092565b5f60ff82169050919050565b610ea681610e91565b82525050565b5f602082019050610ebf5f830184610e9d565b92915050565b5f60208284031215610eda57610ed9610ca3565b5b5f610ee784828501610ced565b91505092915050565b5f8060408385031215610f0657610f05610ca3565b5b5f610f1385828601610ced565b9250506020610f2485828601610ced565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680610f7257607f821691505b602082108103610f8557610f84610f2e565b5b50919050565b610f9481610cc6565b82525050565b5f602082019050610fad5f830184610f8b565b92915050565b610fbc81610d72565b8114610fc6575f80fd5b50565b5f81519050610fd781610fb3565b92915050565b5f60208284031215610ff257610ff1610ca3565b5b5f610fff84828501610fc9565b91505092915050565b7f53656e64657220697320626c61636b6c697374656400000000000000000000005f82015250565b5f61103c601583610c1d565b915061104782611008565b602082019050919050565b5f6020820190508181035f83015261106981611030565b9050919050565b5f6060820190506110835f830186610f8b565b6110906020830185610e19565b61109d6040830184610e19565b949350505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6110dc82610d01565b91506110e783610d01565b92508282019050808211156110ff576110fe6110a5565b5b9291505056fea2646970667358221220eed24427d70fd78a7c8284c2034c681adcadf012435fe40cbe94538eecccb21264736f6c634300081a0033");

    public static void main(String[] args) throws IOException {
        if (args.length != 1) {
            logger.error("Usage: GenesisBlockGenerator <number-of-users>");
        }

        int numUsers = Integer.parseInt(args[0]);
        List<Address> eoaList = new ArrayList<>();
        for (int i = 0; i < numUsers; i++) {
            String publicKeyPath = getPublicKeysPath(i);
            PublicKey publicKey;
            try {
                publicKey = RSAKeyReader.readPublicKey(publicKeyPath);
                eoaList.add(AddressGenerator.generateAddress(publicKey));
            } catch (Exception e) {
                logger.error("Error reading public key and generating address", e);
                return;
            }
        }

        Block genesisBlock = new Block(null);

        // this avoids generating address 0
        for (int i = 0; i < numUsers; i++) {
            Address address = eoaList.get(i);
            genesisBlock.getState().put(address.toString(), new Account(address, 1000L));
            logger.info("client{} has the address {}", i, address);
        }

        genesisBlock.hashBlock();
        saveToFile(genesisBlock);
        logger.info("Genesis block generated successfully!");
    }

    private static String getPublicKeysPath(int userId) {
        return publicKeysDir + "client" + userId + "_public.key";
    }

    private static void saveToFile(Block genesisBlock) throws IOException {
        // JSON without indentation
        String jsonString = genesisBlock.toJson();

        // Improve indentation
        ObjectMapper objectMapper = new ObjectMapper();
        JsonNode jsonNode = objectMapper.readTree(jsonString);
        String indentedJson = objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(jsonNode);

        try (FileOutputStream fos = new FileOutputStream(genesisBlockPath)) {
            fos.write(indentedJson.getBytes());
            logger.info("Saved genesis block:\n{}", indentedJson);
        }
    }
}
